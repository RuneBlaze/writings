Title         : FASTRAL-Pro Study Plan
Author        : Baqiao Liu

[TITLE]

# Goal & Algorithm Description

The goal is to use the idea of FASTRAL and adopt it to this new method "FASTRAL-Pro"
and see if it helps ASTRAL-Pro scale.

## FASTRAL-Pro

The original procedure of FASTRAL (taken from the original paper) works as follows. Assuming input
as as a set of gene trees $G$ where $S$ is the set of species labels,

~ Framed
**Algorithm 1: Original FASTRAL**

 1. Construct a collection of sub-samples of the gene trees in $G$
 2. For each sub-sample, run some summary method $M$ to obtain a tree on $S$, $S$ the taxon set
 3. Let $X$ be all bipartitions appearing in any tree obtained in step 2
 4. Run ASTRAL on the pair $(G, X)$
~

In the GDL setting, the inputs are now mul-trees $G$ along with a taxon set $S$. This implies that first, the summary
method $M$ must be able to handle mul-trees. Some methods that can do this are ASTRID-DISCO, ASTRAL-Pro, etc.. Second,
due to gene loss, a subsample might not cover all the taxa and thus its bipartitions can be useless. This motivates
a way to sample while ensuring the subsampled mul-trees represent all taxa, which I will refer to as obtaining a
"well-formed sample" of the input mul-trees. I will describe my proposed way to obtain a well-formed sample immediately after
this paragraph. For now, due to the good accuracy and fast running time of ASTRID-DISCO, ASTRID-DISCO is chosen
as the default summary method (the only reasonable alternative
due to running time seems to be ASTRID-multi, which performs worse in general than ASTRID-DISCO).
The final obvious modification is that in the final step, ASTRAL-Pro will be used instead of ASTRAL.

The way I am going to ensure that a sample is "well-formed" is described here: assume the original input of
mul-trees $G$ and taxon set $S$. First take all the trees from $G$ where
the tree represents all species and name this set $G'$. If $|G'| \geq \frac{|G|}{20}$
then terminate the procedure (we have enough mul-trees that represent
all species). Otherwise repeatedly obtain a minimal cover $C$ of $S$ from $G - G'$
and add the cover to $G'$ by $G' \gets G' \cup C$ until $|G'| \geq \frac{|G|}{20}$. For
each sample, if it is not well-formed, modify the sample by adding this set of
covers $G'$ to the sample.

~ Framed
Algorithm for making sure that subsamples are complete:

 1. (preprocessing) Initiate a set of covers of $S$, $G'$. First take all the trees from $G$ where
the tree represents all species
 2. 
~

To put the concrete FASTRAL-Pro pipeline into words. Fix some sampling method $f$, not necessarily ensuring
well-formedness of the subsamples, i.e. $f : G \to P(P(G))$ where $P(G)$ denotes the powerset of $G$, along with
some predetermined fast su, given the input mul-trees $G$ on taxon set $S$, FASTRAL-Pro operates as follows: 


~ Framed
**Algorithm 2: FASTRAL-Pro (and variants) (Input: $(G, S)$)**

 1. Run the sampling method. Let $S$ be the subsamples obtained by the subsampling method $f$, i.e. $S \gets f(G)$.
 Ensure that for each subsample $R \in S$, $R$ is well formed; otherwise modify $R$ using the method described above
 to make it well formed. Note that each $R$ here is a set of mul-trees.
 2. For each $R \in S$, run a fast summary method $M$ (the default
 is ASTRID-DISCO. This $M$ is not necessarily
 the same across different samples) on $R$, thereby obtaining a species tree for each sub-sample.
 3. Let $X$ be all bipartitions appearing in any tree obtained in step 2
 4. Run ASTRAL-Pro (or ASTRAL-Multi, FastMulRFS) on the pair $(G, X)$
~

The two free parameters of the algorithm described above are the subsampling method used, and also
the summary method. They will be further specified immediately in Section [#subsample].

## Generalization of FASTRAL-Pro
Fastral-Pro can effectively be generalized. Instead of being set to always run some species-tree inference
algorithm on subsamples, it can be set to produce reasonably high quality singly-labeled species trees using the information
from the input gene trees. There are a couple of ways to do this.

Recall the FastMulRFS preprocessing algorithm (taken verbatim from the original FastMulRFS paper):
~ Framed
**FastMulRFS Preprocessing**

Given a multree $M \in P$, we collapse internal edges with 
some species labeling leaves on both sides of the edge, 
denoting the result $X_M$. We then delete all but one leaf with each species label, denoting the result $M_{X}={R}_{X_M}$.
We define $P_X:=\left\{M_{X}: M \in P\right\}$
~

Given this method, with any input mul-tree $M$ that have all species labels, a (very probably unresolved) tree $M_X$ can be
obtained. This can be resolved either randomly or possibly via ASTRAL-III's way of resolving polytomies.

This motivates this generalized FASTRAL construction that works on mul-trees:

~ Framed
**Algorithm 3: FASTRAL-Pro (generalized) (Input: $(G, S)$)**

 1. Assume some black-box algorithm $O$ that can be queried for a finite number of times, and $O$ takes a specific subset of $G$ and can "cheaply" (both in running time and memory)
  produce a "reasonable-quality" tree $T$. Assume some constrained optimization algorithm $A$ that takes input $G$ a set of mul-trees
  along with $X$ a bipartition constraint set.
    a. Example of a step from $O$: subsample and summary, where a specific subsample of $G$ is taken and a summary method is run on this subsample
    b. Example of a step from $O$: FastMulRFS preprocessor, where an input mul-trees that contain all species labels is converted into
    a singly labeled tree via FastMulRFS preprocessing
 2. Query $O$ for some finite times
 3. Let $X$ be all bipartitions appearing in any tree obtained in step 2
 4. Run $A$ on the pair $(G, X)$
~


## Subsampling Strategies & Summary Methods {#subsample}

Assume that the subsampling strategies described implicitly ensure that the subsamples are well-formed using the method described
in [#sec-fastral-pro]. I describe four subsampling strategies (with two variants for each strategy) that I plan to test
below. These subsampling strategies are designed for medium to large size inputs ($|G| \geq 50$). If the size of
input is small, another setting of the subsampling can be used that will be described later in this subsection.
Fix a parameter $s$, the number of subsamples (that do not represent all input mul-trees) used. Assume that
all fractions are all rounded down if not integers.

 1. (original FASTRAL, variable size): generate $s$ samples, one containing all gene family trees,
$\frac{s - 1}{5}$ containing 50% of the gene trees, $\frac{2 (s - 1)}{5}$ containing 25% of the gene trees, $\frac{2 (s - 1)}{5}$ containing 10% of the gene trees
 2. (original FASTRAL, same size): generate $s$ samples each containing 25% of the gene family trees
 3. (my own, large size subsamples): generate $s$ samples, one containing all gene trees,
 $\frac{s - 1}{10}$ containing expectedly 90% of the gene trees, $\frac{s - 1}{10}$ containing expectedly 80% of the gene trees, $\frac{s - 1}{5}$ containing
 expectedly 70% of the gene (family) trees, $\frac{s - 1}{5}$ containing expectedly 60% of the gene trees, $\frac{s - 1}{5}$ containing expectedly 50% of the
 gene trees.
 4. (my own, more randomized subsampling): generate $s$ samples, one containing all gene family trees. The rest of the subsamples
 will include each gene family tree with probability $p$ ($p$ fixed throughout one subsample), where $p$ is i.i.d. across all subsamples
 and $p$ drawn from $N(0.5, 0.16^2)$

While the default summary method used is ASTRID-DISCO, the most accurate GDL
species tree estimation pipeline that is also very fast, additional
methods can be run on the subsamples to generate trees. Right now the only fast
alternative of
ASTRID-DISCO seems to be MiniNJ, hence motivating a variant using MiniNJ. The other variants
also provide "cheap" ways to obtain trees:

 - (variant a, MiniNJ): also run MiniNJ on the subsamples in addition to running
 other methods. The bipartitions of the MiniNJ tree are also added to the constraint
 set $X$.
 - (variant b, FastMulRFS): consider the generalized setting (where not necessarily every tree must come from
 a summary method running on a subsample). For each input mul-tree that contains all species labels,
 produce a tree for $X$ using the FastMulRFS preprocessing strategy. Note that polytomies must be resolved
 via some method (either ASTRAL's polytomy resolving strategy or randomly resolved)
 - (variant c, using trees from all ASTRID iterations): consider the generalized setting (same as above,
 where not all trees must be a direct output of some summary method). The ASTRID tree from each intermediate ASTRID iteration
 is taken and its bipartitions added to $X$ during ASTRID-DISCO execution.
 


For ASTRID-DISCO, the flag that will be used is either `uns` (the default) or `ujfNnSs` (UPGMA*, NJ, FastME, NJ+NNI, FastME+NNI, NJ+NNI+SPR, FastME+NNI+SPR),
which in previous experiments seem to lead to somewhat better accuracy.

<!--
Recall that all subsamples are directly fed to ASTRID-DISCO (with some fixed flags). The flags that I plan to use is described below:

 - `uns`ï¼Œ UPGMA*, FastME+NNI, FastME+NNI+SPR. This is the current ASTRID default.
 - `ujfNnSs`, UPGMA*, NJ, FastME, NJ+NNI, FastME+NNI, NJ+NNI+SPR, FastME+NNI+SPR. This showed some improvement
 in some conditions in previous experiments
-->

The values of $s$ that will be tested are: 26, 51, 101, 201. (Larger # of samples
can definitely be done, but I am not sure the running time is worth it.)

## Statistical Consistency

At this stage of the investigation, consistency seems not be of the focus, but the analogue of the statistical
consistency theorem of the original paper can be written below (now generalized):

~ Definition
A method is called conditionally statistically consistent under $P$ if hypothesis $P$ implies that this method is statistically consistent.
Note that if $P = \top$ this implies that this method is unconditionally statistically consistent.
~

The theorem can be written below:

~ Theorem

Assume some constrained optimization summary method that works under GDL $A$ that is conditionally statistically consistent
under $P$. Assume that some (not necessarily different) constrained optimization summary method that works under GDL $B$
that is conditional statistically consistent under $Q$. Then the consistency of Fastral-$A$-$B$ ($A$ is
the method that runs on the subsamples, $B$ the method that runs in the final step) can be described below.
  
Assume that the random sampling step of FASTRAL-$A$-$B$ generates $m$ sub-samples, such that there is
at least one subsample $S_i$ whose size also increases to infinity with the number of genes.
Assume that $A$ is the summary method that runs on subsamples. Assume that $B$ is the summary method that runs
on the final constraint set with the original input. Then
FASTRAL-$A$-$B$ is conditionally statistically consistent under $P \land Q$
under the the GDL model.
~

~ Corollary
Fix some conditionally statistically consistent method $M$ under $P$. If in some variant of FASTRAL, the subsampling step a size-increasing subset
is fed to $M$ and its bipartitions added to $X$, then this variant of FASTRAL is conditional statiscally consistent under $P$.
~

~ Example
(Not sure at all if this is useful, but seems at least significant to be jotted down.)

Given any (not necessarily statistically consistent in any way) summary method that works on GDL $M$, the following modification
of $M$ is statistically consistent. Note we require species mapping $m$ for ASTRAL-multi to properly function:

 1. Run $M$ on input $(G, S)$ ($G$ set of mul-trees, $S$ species labels). Add the bipartitions of the result tree to $X$.
 2. Run ASTRAL-multi on input $(G', m)$ where $G'$ is a randomly sampled subset of $G$ containing 0.1% of $G$. Add the bipartitions
 of the result to $X$
 3. Run ASTRAL-multi on $(G, X, m)$. Return the result.
~

This implies that if statistical consistency is desired for FASTRAL-Pro using
ASTRID-decompose, then we can just run another consistent (assuming correct
rooting and tagging) method $M'$ on one of the size-increasing subsamples and add it to
the bipartitions $X$ while continuing to use ASTRID-decompose on all other subsamples. This way FASTRAL-Pro will be
statistically consistent under correct rooting and tagging, just like ASTRAL-Pro.


# Datasets

The following dataset shows condition where too many gene trees are present and the biparition space becomes large.


| Dataset Name                     | default  |
|----------------------------------|----------|
| sources of gene tree discordance | ILS, GDL |
| number of species                | 100      |
| mean gene tree estimation error  | ~43.2%    |
| average discordance              | 20%      |
| duprate, lossrate               | 5e-10, 5e-10    |
| # of gene trees used             |1000, 10000|


For testing, in addition to the datasets listed above, the following dataset
should provide insight into the performance of FASTRAL-Pro under a variety
of conditions:

 - Experiment 1 datasets of the GDL paper "varying degree of GDL and
ILS, relative probabilities of gene duplication and loss, sequence length per
gene, and number of genes." Also the 1000 species analogue versions of the datasets
will be tested on for stress-testing scalability of the methods.

# Methods

 - FASTRAL-Pro (and FASTRAL-FastMulRFS, FASTRAL-multi)
 - A-Pro, default flags with `-t 0` (so in the end with flags `-i $genetrees -o $output -t 0`)
 - ASTRID-DISCO, with flags `uns` for ASTRID
 - (optional, for E4) FastMulRFS, A-multi

# Experiments

| Experiment Environment |                       |
|--------------------------|-----------------------|
| hardware                 | U of I Campus Cluster |
| time limit               | 4 hours per replicate |
| memory                   | 64G                  |
| cores                    | 16 |

There are several parameters that should be determined by experiments. I outline them below along with their default settings:

 - ASTRID flags: uns or ujfNnSs (default: "uns")
 - subsample size (determined first, no default)
 - subsampling strategy (determined first, no default)
 - The choice of the algorithm used in the final step (final-step algorithm), among: A-Pro, A-multi, ASTRAL-DISCO, and FastMulRFS. I think no matter which one has the best accuracy or scalability, they should all be tested since
 they have different theoretical properties (potentially FastMulRFS is just "bad" in both accuracy and running time and can be
 left out, but at least A-Pro and A-multi warrant attention, because A-multi is unconditionally statistically consistent
 and A-Pro is the most practical while conditionally consistent). The default is A-Pro.

I think the experiments can be done in the following order:

 - E1: determine the best subsampling strategy along with the # of subsamples: vary $s$ (# of subsamples) among $26, 51, 101, 201$ and the subsampling strategy (among the four proposed).
 Run FASTRAL-Pro (i.e. using ASTRAL-Pro in the final step) with this $s$ and strategy; choose the best setting for the rest of the experiments.
    - I am actually not sure if I should first fix a default $s$ or default strategy to reduce the running time of the experiments.
    I am afraid of the case where subsampling strategies have different optimal $s$, the # of subsamples, but this can definitely be broken down into two experiments,
    for example fixing a default $s = 51$ to first test the subsampling strategies.
 - E2: determine the best variant: see if any of the variants MiniNJ (also run MiniNJ on the subsamples), FastMulRFS preprocessing (run FastMulRFS preprocessing on the full trees), and adding ASTRID iteration trees significantly improves
 the algorithm. If so, change the algorithm to incorporate the variant. 
 - E3: determine the best ASTRID flags: test whether "ujfNnSs" improves accuracy. Maybe even if it does improve accuracy by a marginal amount,
 do not change the flags since "ujfNnSs" is not the default for ASTRID and is $O(n^3)$, but might be something worth exploring
 - E4: effect of different final-step algorithms: use the previous chosen best parameters, test the accuracy and running time, respectively,
 of FASTRAL-Pro, FASTRAL-FastMulRFS (for the lack of a better name), and FASTRAL-multi. Compare them also to the accuracy
 and running time of FastMulRFS, A-multi.
 - E5: effect of incorporating statistically consistent pipeline: use the easy modification that makes
 the pipeline (conditionally) statistically consistent (i.e. run the final-step algorithm on a small size-increasing
 subset of the input. This way the statistical consistency (conditional or not) of the final-step algorithm is preserved
 in the pipeline) and see if this modification impacts the accuracy or not.
  - I am not sure if this statistical consistency modification can just be left in the discussions as a simple remark
  , or I should actually conduct experiments like what I wrote here. I assume that experiments carry some weight and
  leave them here...



<!--
The experiments will just be running each method (all FASTRAL-Pro variants, A-Pro, ASTRID-DISCO) on all datasets.

## Experiment 1

Run all methods (FASTRAL-Pro variants, A-Pro, and ASTRID-DISCO) on `default` (excluding low number
of gene family tree conditions). This will lead to a general grasp
of the obvious differences in accuracy and running time of all the methods. If some variant of FASTRAL-Pro dramatically
underperforms in accuracy, then it can be dropped at this stage of the experiments.

## Experiment 2

Run all methods (FASTRAL-Pro variants, A-Pro, and ASTRID-DISCO) on the rest of the training datasets. This will
see if under missing taxa conditions (i.i.d. deletion, gene loss) the accuracy of FASTRAL-Pro variants still stay the same.

## Experiment 3

Run all methods on the GDL comparison paper's ILS and GTEE dataset to test robustness under varying ILS and GTEE.

## Experiment 4

Run all methods on 500 taxa, 1000 taxa analogues of the above datasets to detect scalability improvements.
-->

 <!--
1. Run all methods on dataset "default" and "default200". The questions that I want to have answers for are listed below:
  - Question 1: the general accuracy of FASTRAL-Pro under moderate number of species and moderate conditions (ILS, GDL)
  -- is it comparable to ASTRAL-Pro? Will it be possible for it to consistently surpass the accuracy of ASTRID-decompose?
  - Hypothesis to the question: it will achieve similar accuracy (not significantly better or worse) compared to ASTRAL-Pro. If not,
  I think what I will learn from this is that the sampling strategy is not working well. It should have no significantly better accuracy
  or worse accuracy than ASTRID-decompose (based on the results from FASTRAL), but if it is significantly worse, this might
  show that sampling on very small sizes of the input decreases the accuracy by introducing bipartitions of inaccurate trees and I need to test only sampling large subsets
  of the input gene trees.
  - Question 2: Will there be a significant running time improvement in both the 100 species and 200 species setting?
   - Hypothesis to Q2: There will be a significant running time improvement in both the 100 species and 200 species setting. If not,
  I think this will show that ASTRAL-Pro is having a large overhead and I need to figure out a smarter sampling strategy.
  - Question 3: Will my "absurd" sampling strategy (only sample two subsets, one the entire set of gene trees fed to ASTRID-decompose, one 10% of the gene trees fed to ASTRAL-Pro) beat the other sampling strategies for FASTRAL-Pro, and achieve the same accuracy as ASTRID-decompose?
  - Hypothesis to Q3: I hope not, since the additional bipartitions should only expand the search space and help
  ASTRAL-Pro discover more optimal trees. If they don't help at all, this might indicate that I need to either
  devise very sophisticated sampling strategies, or realize that sampling does not really work.

2. Run all methods on the GDL comparison datasets varying DL rate and ILS. The obvious questions are as follows:
   - Question 1: the general accuracy of FASTRAL-Pro under varying DL rate -- is it better or worse than A-Pro under high GDL?
   - Hypothesis: I think it will be similar, and I don't know how to interpret any significant differences yet.
   - Question 2: the general accuracy of FASTRAL-Pro under varying ILS -- is it better or worse than A-Pro under high ILS?
   - Hypothesis: in the original FASTRAL paper, they reported a relative advantage of FASTRAL under high ILS compared to ASTRAL. I expect to see it appear here too.

3. Run all methods on the GDL comparison datasets of 1000 species.
   - Question 1: does FASTRAL perform very similar in accuracy compared to A-Pro while having drastically lower running time?
   - Hypothesis: it will be comparatively very fast while similar in accuracy, otherwise I suspect the sampling strategy is hampering its accuracy, and I need to rethink of a better sampling strategy.

-->
[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
